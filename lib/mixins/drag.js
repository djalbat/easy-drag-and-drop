"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _necessary = require("necessary");
var _easy = require("easy");
var _constants = require("../constants");
var _reference = require("../utilities/reference");
var _event = require("../utilities/event");
var _customEventTypes = require("../customEventTypes");
var ESCAPE_KEY_CODE = _necessary.keyCodes.ESCAPE_KEY_CODE, BLUR_EVENT_TYPE = _easy.eventTypes.BLUR_EVENT_TYPE, LEFT_MOUSE_BUTTON = _easy.mouseButtons.LEFT_MOUSE_BUTTON;
var dragElement = null;
Object.assign(globalThis, {
    dragElement: dragElement
});
function enableDrag() {
    var timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    this.onMouseDown(mouseDownHandler, this);
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
}
function disableDrag() {
    this.offMouseDown(mouseDownHandler, this);
}
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function startDrag(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), boundsRight = bounds.getRight(), boundsBottom = bounds.getBottom(), boundsWidth = boundsRight - boundsLeft, boundsHeight = boundsBottom - boundsTop, topOffset = Math.floor(boundsHeight / 2), leftOffset = Math.floor(boundsWidth / 2), dragElement = this, startMouseTop = mouseTop, startMouseLeft = mouseLeft, customEventType = _customEventTypes.START_DRAG_CUSTOM_EVENT_TYPE;
    _easy.window.onKeyDown(keyDownHandler, this);
    _easy.window.onMouseMove(mouseMoveHandler, this);
    this.addClass("dragging");
    Object.assign(globalThis, {
        dragElement: dragElement
    });
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.callCustomHandlers(customEventType);
    this.drag(mouseTop, mouseLeft);
}
function stopDrag(aborted) {
    var _this = this;
    var dropElement = globalThis.dropElement, customEventType = _customEventTypes.STOP_DRAG_CUSTOM_EVENT_TYPE;
    _easy.window.offKeyDown(keyDownHandler, this);
    _easy.window.offMouseMove(mouseMoveHandler, this);
    var done = function() {
        _this.callCustomHandlersAsync(customEventType, dropElement, aborted, function() {
            var dragElement = null;
            Object.assign(globalThis, {
                dragElement: dragElement
            });
            _this.removeClass("dragging");
        });
    };
    if (dropElement !== null) {
        var dragElement = this; ///
        var dragElementIgnoresDropElement = (0, _reference.checkDragElementIgnoresDropElement)(dragElement, dropElement);
        if (dragElementIgnoresDropElement) {
            dragElement = null;
        }
        dropElement.drop(dragElement, aborted, done);
    } else {
        done();
    }
}
function drag(mouseTop, mouseLeft) {
    var scrollTop = _easy.window.getScrollTop(), scrollLeft = _easy.window.getScrollLeft(), topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), customEventType = _customEventTypes.DRAG_CUSTOM_CUSTOM_EVENT_TYPE, relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    var top = startMouseTop + relativeMouseTop - topOffset - scrollTop, left = startMouseLeft + relativeMouseLeft - leftOffset - scrollLeft;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    var css = {
        top: top,
        left: left
    };
    this.css(css);
    this.callCustomHandlers(customEventType, relativeMouseTop, relativeMouseLeft);
}
function onCustomDrag(dragCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_CUSTOM_CUSTOM_EVENT_TYPE, customHandler = dragCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomDrag(dragCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_CUSTOM_CUSTOM_EVENT_TYPE, customHandler = dragCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomStopDrag(stopDragCustomHandler, element) {
    var customEventType = _customEventTypes.STOP_DRAG_CUSTOM_EVENT_TYPE, customHandler = stopDragCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomStopDrag(stopDragCustomHandler, element) {
    var customEventType = _customEventTypes.STOP_DRAG_CUSTOM_EVENT_TYPE, customHandler = stopDragCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomStartDrag(startDragCustomHandler, element) {
    var customEventType = _customEventTypes.START_DRAG_CUSTOM_EVENT_TYPE, customHandler = startDragCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomStartDrag(startDragCustomHandler, element) {
    var customEventType = _customEventTypes.START_DRAG_CUSTOM_EVENT_TYPE, customHandler = startDragCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var _this = this;
    var timeout = this.getTimeout();
    if (timeout === null) {
        timeout = setTimeout(function() {
            _this.resetTimeout();
            _this.startDrag(mouseTop, mouseLeft);
        }, _constants.START_DRAGGING_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function getTimeout() {
    var timeout = this.getState().timeout;
    return timeout;
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function getTopOffset() {
    var topOffset = this.getState().topOffset;
    return topOffset;
}
function getLeftOffset() {
    var leftOffset = this.getState().leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var startMouseTop = this.getState().startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var startMouseLeft = this.getState().startMouseLeft;
    return startMouseLeft;
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
var _default = {
    enableDrag: enableDrag,
    disableDrag: disableDrag,
    isDragging: isDragging,
    startDrag: startDrag,
    stopDrag: stopDrag,
    drag: drag,
    onCustomDrag: onCustomDrag,
    offCustomDrag: offCustomDrag,
    onCustomStopDrag: onCustomStopDrag,
    offCustomStopDrag: offCustomStopDrag,
    onCustomStartDrag: onCustomStartDrag,
    offCustomStartDrag: offCustomStartDrag,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    getTimeout: getTimeout,
    resetTimeout: resetTimeout,
    updateTimeout: updateTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft
};
function keyDownHandler(event, element) {
    var keyCode = event.keyCode, escapeKey = keyCode === ESCAPE_KEY_CODE, aborted = true;
    if (escapeKey) {
        this.stopDrag(aborted);
        event.stopPropagation();
    }
}
function mouseUpHandler(event, element) {
    var dragging = this.isDragging(), aborted = false;
    dragging ? this.stopDrag(aborted) : this.stopWaitingToDrag();
    event.stopPropagation();
    _easy.window.offEvent(BLUR_EVENT_TYPE, mouseUpHandler, this); ///
    _easy.window.offMouseUp(mouseUpHandler, this);
}
function mouseDownHandler(event, element) {
    var button = event.button;
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging = this.isDragging();
        if (!dragging) {
            var mouseTop = (0, _event.mouseTopFromEvent)(event), mouseLeft = (0, _event.mouseLeftFromEvent)(event);
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
    event.stopPropagation();
    _easy.window.onEvent(BLUR_EVENT_TYPE, mouseUpHandler, this); ///
    _easy.window.onMouseUp(mouseUpHandler, this);
}
function mouseMoveHandler(event, element) {
    var dragging = this.isDragging();
    if (dragging) {
        var mouseTop = (0, _event.mouseTopFromEvent)(event), mouseLeft = (0, _event.mouseLeftFromEvent)(event);
        this.drag(mouseTop, mouseLeft);
    }
    event.stopPropagation();
}

//# sourceMappingURL=data:application/json;base64,