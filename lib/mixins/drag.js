"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _easy = require("easy");
var _necessary = require("necessary");
var _constants = require("../constants");
var _event = require("../utilities/event");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var forEach = _necessary.asynchronousUtilities.forEach, ESCAPE_KEYCODE = _necessary.keyCodes.ESCAPE_KEYCODE, LEFT_MOUSE_BUTTON = _easy.buttons.LEFT_MOUSE_BUTTON, BLUR_EVENT_TYPE = _easy.eventTypes.BLUR_EVENT_TYPE, DRAG_EVENT_TYPE = _easy.eventTypes.DRAG_EVENT_TYPE, STOP_DRAG_EVENT_TYPE = _easy.eventTypes.STOP_DRAG_EVENT_TYPE, START_DRAG_EVENT_TYPE = _easy.eventTypes.START_DRAG_EVENT_TYPE;
var dragElement = null;
Object.assign(globalThis, {
    dragElement: dragElement
});
function onDrag(dragHandler, element) {
    var eventType = DRAG_EVENT_TYPE, handler = dragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDrag(dragHandler, element) {
    var eventType = DRAG_EVENT_TYPE, handler = dragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStopDrag(stopDragHandler, element) {
    var eventType = STOP_DRAG_EVENT_TYPE, handler = stopDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStopDrag(stopDragHandler, element) {
    var eventType = STOP_DRAG_EVENT_TYPE, handler = stopDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStartDrag(startDragHandler, element) {
    var eventType = START_DRAG_EVENT_TYPE, handler = startDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStartDrag(startDragHandler, element) {
    var eventType = START_DRAG_EVENT_TYPE, handler = startDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function enableDrag() {
    var _properties = this.properties, _$onDrag = _properties.onDrag, _$onStopDrag = _properties.onStopDrag, _$onStartDrag = _properties.onStartDrag, dragHandler = _$onDrag, stopDragHandler = _$onStopDrag, startDragHandler = _$onStartDrag, timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    dragHandler && this.onDrag(dragHandler);
    stopDragHandler && this.onStopDrag(stopDragHandler);
    startDragHandler && this.onStartDrag(startDragHandler);
    this.onMouseDown(mouseDownHandler, this);
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
}
function disableDrag() {
    var _properties = this.properties, _$onDrag = _properties.onDrag, _$onStopDrag = _properties.onStopDrag, _$onStartDrag = _properties.onStartDrag, dragHandler = _$onDrag, stopDragHandler = _$onStopDrag, startDragHandler = _$onStartDrag; ///
    dragHandler && this.offDrag(dragHandler);
    stopDragHandler && this.offStopDrag(stopDragHandler);
    startDragHandler && this.offStartDrag(startDragHandler);
    this.offMouseDown(mouseDownHandler, this);
}
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var timeout = this.getTimeout();
    if (timeout === null) {
        var _this = this;
        timeout = setTimeout(function() {
            _this.resetTimeout();
            _this.startDrag(mouseTop, mouseLeft);
        }, _constants.START_DRAGGING_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function startDrag(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), eventType = START_DRAG_EVENT_TYPE, boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), boundsRight = bounds.getRight(), boundsBottom = bounds.getBottom(), boundsWidth = boundsRight - boundsLeft, boundsHeight = boundsBottom - boundsTop, topOffset = Math.floor(boundsHeight / 2), leftOffset = Math.floor(boundsWidth / 2), dragElement1 = this, startMouseTop = mouseTop, startMouseLeft = mouseLeft; ///
    _easy.window.onKeyDown(keyDownHandler, this);
    _easy.window.onMouseMove(mouseMoveHandler, this);
    this.addClass("dragging");
    Object.assign(globalThis, {
        dragElement: dragElement1
    });
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.callHandlers(eventType);
    this.drag(mouseTop, mouseLeft);
}
function stopDrag(aborted) {
    var _this = this;
    var dropElement = globalThis.dropElement, eventType = STOP_DRAG_EVENT_TYPE;
    _easy.window.offKeyDown(keyDownHandler, this);
    _easy.window.offMouseMove(mouseMoveHandler, this);
    var done = function() {
        var _this1 = _this;
        _this.callHandlersAsync(eventType, dropElement, aborted, function() {
            var dragElement3 = null;
            Object.assign(globalThis, {
                dragElement: dragElement3
            });
            _this1.removeClass("dragging");
        });
    };
    if (dropElement !== null) {
        var dragElement2 = this; ///
        dropElement.drop(dragElement2, aborted, done);
    } else {
        done();
    }
}
function drag(mouseTop, mouseLeft) {
    var eventType = DRAG_EVENT_TYPE, scrollTop = _easy.window.getScrollTop(), scrollLeft = _easy.window.getScrollLeft(), topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    var top = startMouseTop + relativeMouseTop - topOffset - scrollTop, left = startMouseLeft + relativeMouseLeft - leftOffset - scrollLeft;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    var css = {
        top: top,
        left: left
    };
    this.css(css);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
}
function getTimeout() {
    var state = this.getState(), timeout = state.timeout;
    return timeout;
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function getTopOffset() {
    var state = this.getState(), topOffset = state.topOffset;
    return topOffset;
}
function getLeftOffset() {
    var state = this.getState(), leftOffset = state.leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var state = this.getState(), startMouseTop = state.startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var state = this.getState(), startMouseLeft = state.startMouseLeft;
    return startMouseLeft;
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
function callHandlers(eventType) {
    for(var _len = arguments.length, remainingArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        remainingArguments[_key - 1] = arguments[_key];
    }
    var _this = this;
    var eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var _handler;
        var handler = eventListener.handler, handlerElement = eventListener.element, element = _this; ///
        (_handler = handler).call.apply(_handler, [
            handlerElement
        ].concat(_toConsumableArray(remainingArguments), [
            element
        ]));
    });
}
function callHandlersAsync(eventType) {
    for(var _len = arguments.length, remainingArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        remainingArguments[_key - 1] = arguments[_key];
    }
    var _this = this;
    var done1 = remainingArguments.pop(), eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var _handler;
        var handler = eventListener.handler, handlerElement = eventListener.element, element = _this, done = next; ///
        (_handler = handler).call.apply(_handler, [
            handlerElement
        ].concat(_toConsumableArray(remainingArguments), [
            element,
            done
        ]));
    }, done1);
}
var _default = {
    onDrag: onDrag,
    offDrag: offDrag,
    onStopDrag: onStopDrag,
    offStopDrag: offStopDrag,
    onStartDrag: onStartDrag,
    offStartDrag: offStartDrag,
    enableDrag: enableDrag,
    disableDrag: disableDrag,
    isDragging: isDragging,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    startDrag: startDrag,
    stopDrag: stopDrag,
    drag: drag,
    getTimeout: getTimeout,
    resetTimeout: resetTimeout,
    updateTimeout: updateTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft,
    callHandlers: callHandlers,
    callHandlersAsync: callHandlersAsync
};
exports.default = _default;
function keyDownHandler(event, element) {
    var keyCode = event.keyCode, escapeKey = keyCode === ESCAPE_KEYCODE, aborted = true;
    if (escapeKey) {
        this.stopDrag(aborted);
        event.stopPropagation();
    }
}
function mouseUpHandler(event, element) {
    var dragging = this.isDragging(), aborted = false;
    dragging ? this.stopDrag(aborted) : this.stopWaitingToDrag();
    event.stopPropagation();
    _easy.window.off(BLUR_EVENT_TYPE, mouseUpHandler, this); ///
    _easy.window.offMouseUp(mouseUpHandler, this);
}
function mouseDownHandler(event, element) {
    var button = event.button;
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging = this.isDragging();
        if (!dragging) {
            var mouseTop = (0, _event).mouseTopFromEvent(event), mouseLeft = (0, _event).mouseLeftFromEvent(event);
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
    event.stopPropagation();
    _easy.window.on(BLUR_EVENT_TYPE, mouseUpHandler, this); ///
    _easy.window.onMouseUp(mouseUpHandler, this);
}
function mouseMoveHandler(event, element) {
    var dragging = this.isDragging();
    if (dragging) {
        var mouseTop = (0, _event).mouseTopFromEvent(event), mouseLeft = (0, _event).mouseLeftFromEvent(event);
        this.drag(mouseTop, mouseLeft);
    }
    event.stopPropagation();
}

//# sourceMappingURL=data:application/json;base64,