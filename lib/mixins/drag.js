"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _easy = require("easy");
var _necessary = require("necessary");
var _constants = require("../constants");
var _event = require("../utilities/event");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var forEach = _necessary.asynchronousUtilities.forEach, ESCAPE_KEYCODE = _necessary.keyCodes.ESCAPE_KEYCODE, LEFT_MOUSE_BUTTON = _easy.buttons.LEFT_MOUSE_BUTTON, BLUR_EVENT_TYPE = _easy.eventTypes.BLUR_EVENT_TYPE, DRAG_EVENT_TYPE = _easy.eventTypes.DRAG_EVENT_TYPE, STOP_DRAG_EVENT_TYPE = _easy.eventTypes.STOP_DRAG_EVENT_TYPE, START_DRAG_EVENT_TYPE = _easy.eventTypes.START_DRAG_EVENT_TYPE;
var dragElement = null;
Object.assign(globalThis, {
    dragElement: dragElement
});
function onDrag(dragHandler, element) {
    var eventType = DRAG_EVENT_TYPE, handler = dragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDrag(dragHandler, element) {
    var eventType = DRAG_EVENT_TYPE, handler = dragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStopDrag(stopDragHandler, element) {
    var eventType = STOP_DRAG_EVENT_TYPE, handler = stopDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStopDrag(stopDragHandler, element) {
    var eventType = STOP_DRAG_EVENT_TYPE, handler = stopDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStartDrag(startDragHandler, element) {
    var eventType = START_DRAG_EVENT_TYPE, handler = startDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStartDrag(startDragHandler, element) {
    var eventType = START_DRAG_EVENT_TYPE, handler = startDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function enableDrag() {
    var _properties = this.properties, onDrag1 = _properties.onDrag, onStopDrag1 = _properties.onStopDrag, onStartDrag1 = _properties.onStartDrag, dragHandler = onDrag1, stopDragHandler = onStopDrag1, startDragHandler = onStartDrag1, timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    dragHandler && this.onDrag(dragHandler);
    stopDragHandler && this.onStopDrag(stopDragHandler);
    startDragHandler && this.onStartDrag(startDragHandler);
    this.onMouseDown(mouseDownHandler, this);
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
}
function disableDrag() {
    var _properties = this.properties, onDrag2 = _properties.onDrag, onStopDrag2 = _properties.onStopDrag, onStartDrag2 = _properties.onStartDrag, dragHandler = onDrag2, stopDragHandler = onStopDrag2, startDragHandler = onStartDrag2; ///
    dragHandler && this.offDrag(dragHandler);
    stopDragHandler && this.offStopDrag(stopDragHandler);
    startDragHandler && this.offStartDrag(startDragHandler);
    this.offMouseDown(mouseDownHandler, this);
}
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var timeout = this.getTimeout();
    if (timeout === null) {
        var _this = this;
        timeout = setTimeout(function() {
            _this.resetTimeout();
            _this.startDrag(mouseTop, mouseLeft);
        }, _constants.START_DRAGGING_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function startDrag(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), eventType = START_DRAG_EVENT_TYPE, boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), boundsRight = bounds.getRight(), boundsBottom = bounds.getBottom(), boundsWidth = boundsRight - boundsLeft, boundsHeight = boundsBottom - boundsTop, topOffset = Math.floor(boundsHeight / 2), leftOffset = Math.floor(boundsWidth / 2), dragElement1 = this, startMouseTop = mouseTop, startMouseLeft = mouseLeft; ///
    _easy.window.onKeyDown(keyDownHandler, this);
    _easy.window.onMouseMove(mouseMoveHandler, this);
    this.addClass("dragging");
    Object.assign(globalThis, {
        dragElement: dragElement1
    });
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.callHandlers(eventType);
    this.drag(mouseTop, mouseLeft);
}
function stopDrag(aborted) {
    var _this = this;
    var dropElement = globalThis.dropElement, eventType = STOP_DRAG_EVENT_TYPE;
    _easy.window.offKeyDown(keyDownHandler, this);
    _easy.window.offMouseMove(mouseMoveHandler, this);
    var done = function() {
        var _this1 = _this;
        _this.callHandlersAsync(eventType, dropElement, aborted, function() {
            var dragElement3 = null;
            Object.assign(globalThis, {
                dragElement: dragElement3
            });
            _this1.removeClass("dragging");
        });
    };
    if (dropElement !== null) {
        var dragElement2 = this; ///
        dropElement.drop(dragElement2, aborted, done);
    } else {
        done();
    }
}
function drag(mouseTop, mouseLeft) {
    var eventType = DRAG_EVENT_TYPE, scrollTop = _easy.window.getScrollTop(), scrollLeft = _easy.window.getScrollLeft(), topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    var top = startMouseTop + relativeMouseTop - topOffset - scrollTop, left = startMouseLeft + relativeMouseLeft - leftOffset - scrollLeft;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    var css = {
        top: top,
        left: left
    };
    this.css(css);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
}
function getTimeout() {
    var state = this.getState(), timeout = state.timeout;
    return timeout;
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function getTopOffset() {
    var state = this.getState(), topOffset = state.topOffset;
    return topOffset;
}
function getLeftOffset() {
    var state = this.getState(), leftOffset = state.leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var state = this.getState(), startMouseTop = state.startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var state = this.getState(), startMouseLeft = state.startMouseLeft;
    return startMouseLeft;
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
function callHandlers(eventType) {
    for(var _len = arguments.length, remainingArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        remainingArguments[_key - 1] = arguments[_key];
    }
    var _this = this;
    var eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var _handler;
        var handler = eventListener.handler, handlerElement = eventListener.element, element = _this; ///
        (_handler = handler).call.apply(_handler, [
            handlerElement
        ].concat(_toConsumableArray(remainingArguments), [
            element
        ]));
    });
}
function callHandlersAsync(eventType) {
    for(var _len = arguments.length, remainingArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        remainingArguments[_key - 1] = arguments[_key];
    }
    var _this = this;
    var done1 = remainingArguments.pop(), eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var _handler;
        var handler = eventListener.handler, handlerElement = eventListener.element, element = _this, done = next; ///
        (_handler = handler).call.apply(_handler, [
            handlerElement
        ].concat(_toConsumableArray(remainingArguments), [
            element,
            done
        ]));
    }, done1);
}
var _default = {
    onDrag: onDrag,
    offDrag: offDrag,
    onStopDrag: onStopDrag,
    offStopDrag: offStopDrag,
    onStartDrag: onStartDrag,
    offStartDrag: offStartDrag,
    enableDrag: enableDrag,
    disableDrag: disableDrag,
    isDragging: isDragging,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    startDrag: startDrag,
    stopDrag: stopDrag,
    drag: drag,
    getTimeout: getTimeout,
    resetTimeout: resetTimeout,
    updateTimeout: updateTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft,
    callHandlers: callHandlers,
    callHandlersAsync: callHandlersAsync
};
exports.default = _default;
function keyDownHandler(event, element) {
    var keyCode = event.keyCode, escapeKey = keyCode === ESCAPE_KEYCODE, aborted = true;
    if (escapeKey) {
        this.stopDrag(aborted);
        event.stopPropagation();
    }
}
function mouseUpHandler(event, element) {
    var dragging = this.isDragging(), aborted = false;
    dragging ? this.stopDrag(aborted) : this.stopWaitingToDrag();
    event.stopPropagation();
    _easy.window.off(BLUR_EVENT_TYPE, mouseUpHandler, this); ///
    _easy.window.offMouseUp(mouseUpHandler, this);
}
function mouseDownHandler(event, element) {
    var button = event.button;
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging = this.isDragging();
        if (!dragging) {
            var mouseTop = (0, _event).mouseTopFromEvent(event), mouseLeft = (0, _event).mouseLeftFromEvent(event);
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
    event.stopPropagation();
    _easy.window.on(BLUR_EVENT_TYPE, mouseUpHandler, this); ///
    _easy.window.onMouseUp(mouseUpHandler, this);
}
function mouseMoveHandler(event, element) {
    var dragging = this.isDragging();
    if (dragging) {
        var mouseTop = (0, _event).mouseTopFromEvent(event), mouseLeft = (0, _event).mouseLeftFromEvent(event);
        this.drag(mouseTop, mouseLeft);
    }
    event.stopPropagation();
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZHJhZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgd2luZG93LCBidXR0b25zLCBldmVudFR5cGVzIH0gZnJvbSBcImVhc3lcIjtcbmltcG9ydCB7IGtleUNvZGVzLCBhc3luY2hyb25vdXNVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCIgO1xuXG5pbXBvcnQgeyBTVEFSVF9EUkFHR0lOR19ERUxBWSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IG1vdXNlVG9wRnJvbUV2ZW50LCBtb3VzZUxlZnRGcm9tRXZlbnQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2V2ZW50XCI7XG5cbmNvbnN0IHsgZm9yRWFjaCB9ID0gYXN5bmNocm9ub3VzVXRpbGl0aWVzLFxuICAgICAgeyBFU0NBUEVfS0VZQ09ERSB9ID0ga2V5Q29kZXMsXG4gICAgICB7IExFRlRfTU9VU0VfQlVUVE9OIH0gPSBidXR0b25zLFxuICAgICAgeyBCTFVSX0VWRU5UX1RZUEUsIERSQUdfRVZFTlRfVFlQRSwgU1RPUF9EUkFHX0VWRU5UX1RZUEUsIFNUQVJUX0RSQUdfRVZFTlRfVFlQRSB9ID0gZXZlbnRUeXBlc1xuXG5jb25zdCBkcmFnRWxlbWVudCA9IG51bGw7XG5cbk9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywge1xuICBkcmFnRWxlbWVudFxufSk7XG5cbmZ1bmN0aW9uIG9uRHJhZyhkcmFnSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBEUkFHX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBkcmFnSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZEcmFnKGRyYWdIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IERSQUdfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGRyYWdIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9uU3RvcERyYWcoc3RvcERyYWdIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IFNUT1BfRFJBR19FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gc3RvcERyYWdIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZlN0b3BEcmFnKHN0b3BEcmFnSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBTVE9QX0RSQUdfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IHN0b3BEcmFnSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvblN0YXJ0RHJhZyhzdGFydERyYWdIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IFNUQVJUX0RSQUdfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IHN0YXJ0RHJhZ0hhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmU3RhcnREcmFnKHN0YXJ0RHJhZ0hhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gU1RBUlRfRFJBR19FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gc3RhcnREcmFnSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBlbmFibGVEcmFnKCkge1xuICBjb25zdCB7IG9uRHJhZywgb25TdG9wRHJhZywgb25TdGFydERyYWcgfSA9IHRoaXMucHJvcGVydGllcyxcbiAgICAgICAgZHJhZ0hhbmRsZXIgPSBvbkRyYWcsIC8vL1xuICAgICAgICBzdG9wRHJhZ0hhbmRsZXIgPSBvblN0b3BEcmFnLCAvLy9cbiAgICAgICAgc3RhcnREcmFnSGFuZGxlciA9IG9uU3RhcnREcmFnLCAvLy9cbiAgICAgICAgdGltZW91dCA9IG51bGwsXG4gICAgICAgIHRvcE9mZnNldCA9IG51bGwsXG4gICAgICAgIGxlZnRPZmZzZXQgPSBudWxsLFxuICAgICAgICBzdGFydE1vdXNlVG9wID0gbnVsbCxcbiAgICAgICAgc3RhcnRNb3VzZUxlZnQgPSBudWxsO1xuXG4gIGRyYWdIYW5kbGVyICYmIHRoaXMub25EcmFnKGRyYWdIYW5kbGVyKTtcbiAgc3RvcERyYWdIYW5kbGVyICYmIHRoaXMub25TdG9wRHJhZyhzdG9wRHJhZ0hhbmRsZXIpO1xuICBzdGFydERyYWdIYW5kbGVyICYmIHRoaXMub25TdGFydERyYWcoc3RhcnREcmFnSGFuZGxlcik7XG5cbiAgdGhpcy5vbk1vdXNlRG93bihtb3VzZURvd25IYW5kbGVyLCB0aGlzKTtcblxuICB0aGlzLnNldFN0YXRlKHtcbiAgICB0aW1lb3V0LFxuICAgIHRvcE9mZnNldCxcbiAgICBsZWZ0T2Zmc2V0LFxuICAgIHN0YXJ0TW91c2VUb3AsXG4gICAgc3RhcnRNb3VzZUxlZnRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVEcmFnKCkge1xuICBjb25zdCB7IG9uRHJhZywgb25TdG9wRHJhZywgb25TdGFydERyYWcgfSA9IHRoaXMucHJvcGVydGllcyxcbiAgICAgICAgZHJhZ0hhbmRsZXIgPSBvbkRyYWcsIC8vL1xuICAgICAgICBzdG9wRHJhZ0hhbmRsZXIgPSBvblN0b3BEcmFnLCAvLy9cbiAgICAgICAgc3RhcnREcmFnSGFuZGxlciA9IG9uU3RhcnREcmFnOyAvLy9cblxuICBkcmFnSGFuZGxlciAmJiB0aGlzLm9mZkRyYWcoZHJhZ0hhbmRsZXIpO1xuICBzdG9wRHJhZ0hhbmRsZXIgJiYgdGhpcy5vZmZTdG9wRHJhZyhzdG9wRHJhZ0hhbmRsZXIpO1xuICBzdGFydERyYWdIYW5kbGVyICYmIHRoaXMub2ZmU3RhcnREcmFnKHN0YXJ0RHJhZ0hhbmRsZXIpO1xuXG4gIHRoaXMub2ZmTW91c2VEb3duKG1vdXNlRG93bkhhbmRsZXIsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBpc0RyYWdnaW5nKCkge1xuICBjb25zdCBkcmFnZ2luZyA9IHRoaXMuaGFzQ2xhc3MoXCJkcmFnZ2luZ1wiKTtcblxuICByZXR1cm4gZHJhZ2dpbmc7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0V2FpdGluZ1RvRHJhZyhtb3VzZVRvcCwgbW91c2VMZWZ0KSB7XG4gIGxldCB0aW1lb3V0ID0gdGhpcy5nZXRUaW1lb3V0KCk7XG5cbiAgaWYgKHRpbWVvdXQgPT09IG51bGwpIHtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0VGltZW91dCgpO1xuXG4gICAgICB0aGlzLnN0YXJ0RHJhZyhtb3VzZVRvcCwgbW91c2VMZWZ0KTtcbiAgICB9LCBTVEFSVF9EUkFHR0lOR19ERUxBWSk7XG5cbiAgICB0aGlzLnVwZGF0ZVRpbWVvdXQodGltZW91dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcFdhaXRpbmdUb0RyYWcoKSB7XG4gIGNvbnN0IHRpbWVvdXQgPSB0aGlzLmdldFRpbWVvdXQoKTtcblxuICBpZiAodGltZW91dCAhPT0gbnVsbCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgIHRoaXMucmVzZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnREcmFnKG1vdXNlVG9wLCBtb3VzZUxlZnQpIHtcbiAgY29uc3QgYm91bmRzID0gdGhpcy5nZXRCb3VuZHMoKSxcbiAgICAgICAgZXZlbnRUeXBlID0gU1RBUlRfRFJBR19FVkVOVF9UWVBFLFxuICAgICAgICBib3VuZHNUb3AgPSBib3VuZHMuZ2V0VG9wKCksXG4gICAgICAgIGJvdW5kc0xlZnQgPSBib3VuZHMuZ2V0TGVmdCgpLFxuICAgICAgICBib3VuZHNSaWdodCA9IGJvdW5kcy5nZXRSaWdodCgpLFxuICAgICAgICBib3VuZHNCb3R0b20gPSBib3VuZHMuZ2V0Qm90dG9tKCksXG4gICAgICAgIGJvdW5kc1dpZHRoID0gYm91bmRzUmlnaHQgLSBib3VuZHNMZWZ0LFxuICAgICAgICBib3VuZHNIZWlnaHQgPSBib3VuZHNCb3R0b20gLSBib3VuZHNUb3AsXG4gICAgICAgIHRvcE9mZnNldCA9IE1hdGguZmxvb3IoYm91bmRzSGVpZ2h0IC8gMiksXG4gICAgICAgIGxlZnRPZmZzZXQgPSBNYXRoLmZsb29yKGJvdW5kc1dpZHRoIC8gMiksXG4gICAgICAgIGRyYWdFbGVtZW50ID0gdGhpcywgLy8vXG4gICAgICAgIHN0YXJ0TW91c2VUb3AgPSBtb3VzZVRvcCwgLy8vXG4gICAgICAgIHN0YXJ0TW91c2VMZWZ0ID0gbW91c2VMZWZ0OyAvLy9cblxuICB3aW5kb3cub25LZXlEb3duKGtleURvd25IYW5kbGVyLCB0aGlzKTtcblxuICB3aW5kb3cub25Nb3VzZU1vdmUobW91c2VNb3ZlSGFuZGxlciwgdGhpcyk7XG5cbiAgdGhpcy5hZGRDbGFzcyhcImRyYWdnaW5nXCIpO1xuXG4gIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywge1xuICAgIGRyYWdFbGVtZW50XG4gIH0pO1xuXG4gIHRoaXMuc2V0VG9wT2Zmc2V0KHRvcE9mZnNldCk7XG5cbiAgdGhpcy5zZXRMZWZ0T2Zmc2V0KGxlZnRPZmZzZXQpO1xuXG4gIHRoaXMuc2V0U3RhcnRNb3VzZVRvcChzdGFydE1vdXNlVG9wKTtcblxuICB0aGlzLnNldFN0YXJ0TW91c2VMZWZ0KHN0YXJ0TW91c2VMZWZ0KTtcblxuICB0aGlzLmNhbGxIYW5kbGVycyhldmVudFR5cGUpO1xuXG4gIHRoaXMuZHJhZyhtb3VzZVRvcCwgbW91c2VMZWZ0KTtcbn1cblxuZnVuY3Rpb24gc3RvcERyYWcoYWJvcnRlZCkge1xuICBjb25zdCB7IGRyb3BFbGVtZW50IH0gPSBnbG9iYWxUaGlzLFxuICAgICAgICBldmVudFR5cGUgPSBTVE9QX0RSQUdfRVZFTlRfVFlQRTtcblxuICB3aW5kb3cub2ZmS2V5RG93bihrZXlEb3duSGFuZGxlciwgdGhpcyk7XG5cbiAgd2luZG93Lm9mZk1vdXNlTW92ZShtb3VzZU1vdmVIYW5kbGVyLCB0aGlzKTtcblxuICBjb25zdCBkb25lID0gKCkgPT4ge1xuICAgIHRoaXMuY2FsbEhhbmRsZXJzQXN5bmMoZXZlbnRUeXBlLCBkcm9wRWxlbWVudCwgYWJvcnRlZCwgKCkgPT4ge1xuICAgICAgY29uc3QgZHJhZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHtcbiAgICAgICAgZHJhZ0VsZW1lbnRcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKFwiZHJhZ2dpbmdcIik7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoZHJvcEVsZW1lbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCBkcmFnRWxlbWVudCA9IHRoaXM7IC8vL1xuXG4gICAgZHJvcEVsZW1lbnQuZHJvcChkcmFnRWxlbWVudCwgYWJvcnRlZCwgZG9uZSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYWcobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBldmVudFR5cGUgPSBEUkFHX0VWRU5UX1RZUEUsXG4gICAgICAgIHNjcm9sbFRvcCA9IHdpbmRvdy5nZXRTY3JvbGxUb3AoKSxcbiAgICAgICAgc2Nyb2xsTGVmdCA9IHdpbmRvdy5nZXRTY3JvbGxMZWZ0KCksXG4gICAgICAgIHRvcE9mZnNldCA9IHRoaXMuZ2V0VG9wT2Zmc2V0KCksXG4gICAgICAgIGxlZnRPZmZzZXQgPSB0aGlzLmdldExlZnRPZmZzZXQoKSxcbiAgICAgICAgc3RhcnRNb3VzZVRvcCA9IHRoaXMuZ2V0U3RhcnRNb3VzZVRvcCgpLFxuICAgICAgICBzdGFydE1vdXNlTGVmdCA9IHRoaXMuZ2V0U3RhcnRNb3VzZUxlZnQoKSxcbiAgICAgICAgcmVsYXRpdmVNb3VzZVRvcCA9IG1vdXNlVG9wIC0gc3RhcnRNb3VzZVRvcCxcbiAgICAgICAgcmVsYXRpdmVNb3VzZUxlZnQgPSBtb3VzZUxlZnQgLSBzdGFydE1vdXNlTGVmdDtcblxuICBsZXQgdG9wID0gc3RhcnRNb3VzZVRvcCArIHJlbGF0aXZlTW91c2VUb3AgLSB0b3BPZmZzZXQgLSBzY3JvbGxUb3AsXG4gICAgICBsZWZ0ID0gc3RhcnRNb3VzZUxlZnQgKyByZWxhdGl2ZU1vdXNlTGVmdCAtIGxlZnRPZmZzZXQgLSBzY3JvbGxMZWZ0O1xuXG4gIHRvcCA9IGAke3RvcH1weGA7IC8vL1xuICBsZWZ0ID0gYCR7bGVmdH1weGA7IC8vL1xuXG4gIGNvbnN0IGNzcyA9IHtcbiAgICB0b3AsXG4gICAgbGVmdFxuICB9O1xuXG4gIHRoaXMuY3NzKGNzcyk7XG5cbiAgdGhpcy5jYWxsSGFuZGxlcnMoZXZlbnRUeXBlLCByZWxhdGl2ZU1vdXNlVG9wLCByZWxhdGl2ZU1vdXNlTGVmdCk7XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQoKSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpLFxuICAgICAgICB7IHRpbWVvdXQgfSA9IHN0YXRlO1xuXG4gIHJldHVybiB0aW1lb3V0O1xufVxuXG5mdW5jdGlvbiByZXNldFRpbWVvdXQoKSB7XG4gIGNvbnN0IHRpbWVvdXQgPSBudWxsO1xuXG4gIHRoaXMudXBkYXRlVGltZW91dCh0aW1lb3V0KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVGltZW91dCh0aW1lb3V0KSB7XG4gIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgIHRpbWVvdXRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFRvcE9mZnNldCgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICAgIHsgdG9wT2Zmc2V0IH0gPSBzdGF0ZTtcblxuICByZXR1cm4gdG9wT2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBnZXRMZWZ0T2Zmc2V0KCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKSxcbiAgICAgICAgeyBsZWZ0T2Zmc2V0IH0gPSBzdGF0ZTtcblxuICByZXR1cm4gbGVmdE9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhcnRNb3VzZVRvcCgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICB7IHN0YXJ0TW91c2VUb3AgfSA9IHN0YXRlO1xuXG4gIHJldHVybiBzdGFydE1vdXNlVG9wO1xufVxuXG5mdW5jdGlvbiBnZXRTdGFydE1vdXNlTGVmdCgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICB7IHN0YXJ0TW91c2VMZWZ0IH0gPSBzdGF0ZTtcblxuICByZXR1cm4gc3RhcnRNb3VzZUxlZnQ7XG59XG5cbmZ1bmN0aW9uIHNldFRvcE9mZnNldCh0b3BPZmZzZXQpIHtcbiAgdGhpcy51cGRhdGVTdGF0ZSh7XG4gICAgdG9wT2Zmc2V0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRMZWZ0T2Zmc2V0KGxlZnRPZmZzZXQpIHtcbiAgdGhpcy51cGRhdGVTdGF0ZSh7XG4gICAgbGVmdE9mZnNldFxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0U3RhcnRNb3VzZVRvcChzdGFydE1vdXNlVG9wKSB7XG4gIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgIHN0YXJ0TW91c2VUb3BcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXJ0TW91c2VMZWZ0KHN0YXJ0TW91c2VMZWZ0KSB7XG4gIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgIHN0YXJ0TW91c2VMZWZ0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjYWxsSGFuZGxlcnMoZXZlbnRUeXBlLCAuLi5yZW1haW5pbmdBcmd1bWVudHMpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmZpbmRFdmVudExpc3RlbmVycyhldmVudFR5cGUpO1xuXG4gIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGV2ZW50TGlzdGVuZXIpID0+IHtcbiAgICBjb25zdCB7IGhhbmRsZXIsIGVsZW1lbnQ6IGhhbmRsZXJFbGVtZW50IH0gPSBldmVudExpc3RlbmVyLFxuICAgICAgICAgIGVsZW1lbnQgPSB0aGlzOyAvLy9cblxuICAgIGhhbmRsZXIuY2FsbChoYW5kbGVyRWxlbWVudCwgLi4ucmVtYWluaW5nQXJndW1lbnRzLCBlbGVtZW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxIYW5kbGVyc0FzeW5jKGV2ZW50VHlwZSwgLi4ucmVtYWluaW5nQXJndW1lbnRzKSB7XG4gIGNvbnN0IGRvbmUgPSByZW1haW5pbmdBcmd1bWVudHMucG9wKCksICAvLy9cbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmZpbmRFdmVudExpc3RlbmVycyhldmVudFR5cGUpO1xuXG4gIGZvckVhY2goZXZlbnRMaXN0ZW5lcnMsIChldmVudExpc3RlbmVyLCBuZXh0KSA9PiB7XG4gICAgY29uc3QgeyBoYW5kbGVyLCBlbGVtZW50OiBoYW5kbGVyRWxlbWVudCB9ID0gZXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICBlbGVtZW50ID0gdGhpcywgLy8vXG4gICAgICAgICAgZG9uZSA9IG5leHQ7ICAvLy9cblxuICAgIGhhbmRsZXIuY2FsbChoYW5kbGVyRWxlbWVudCwgLi4ucmVtYWluaW5nQXJndW1lbnRzLCBlbGVtZW50LCBkb25lKTtcbiAgfSwgZG9uZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgb25EcmFnLFxuICBvZmZEcmFnLFxuICBvblN0b3BEcmFnLFxuICBvZmZTdG9wRHJhZyxcbiAgb25TdGFydERyYWcsXG4gIG9mZlN0YXJ0RHJhZyxcbiAgZW5hYmxlRHJhZyxcbiAgZGlzYWJsZURyYWcsXG4gIGlzRHJhZ2dpbmcsXG4gIHN0YXJ0V2FpdGluZ1RvRHJhZyxcbiAgc3RvcFdhaXRpbmdUb0RyYWcsXG4gIHN0YXJ0RHJhZyxcbiAgc3RvcERyYWcsXG4gIGRyYWcsXG4gIGdldFRpbWVvdXQsXG4gIHJlc2V0VGltZW91dCxcbiAgdXBkYXRlVGltZW91dCxcbiAgZ2V0VG9wT2Zmc2V0LFxuICBnZXRMZWZ0T2Zmc2V0LFxuICBnZXRTdGFydE1vdXNlVG9wLFxuICBnZXRTdGFydE1vdXNlTGVmdCxcbiAgc2V0VG9wT2Zmc2V0LFxuICBzZXRMZWZ0T2Zmc2V0LFxuICBzZXRTdGFydE1vdXNlVG9wLFxuICBzZXRTdGFydE1vdXNlTGVmdCxcbiAgY2FsbEhhbmRsZXJzLFxuICBjYWxsSGFuZGxlcnNBc3luY1xufTtcblxuZnVuY3Rpb24ga2V5RG93bkhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBrZXlDb2RlIH0gPSBldmVudCxcbiAgICAgICAgZXNjYXBlS2V5ID0gKGtleUNvZGUgPT09IEVTQ0FQRV9LRVlDT0RFKSxcbiAgICAgICAgYWJvcnRlZCA9IHRydWU7XG5cbiAgaWYgKGVzY2FwZUtleSkge1xuICAgIHRoaXMuc3RvcERyYWcoYWJvcnRlZCk7XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtb3VzZVVwSGFuZGxlcihldmVudCwgZWxlbWVudCkge1xuICBjb25zdCBkcmFnZ2luZyA9IHRoaXMuaXNEcmFnZ2luZygpLFxuICAgICAgICBhYm9ydGVkID0gZmFsc2U7XG5cbiAgZHJhZ2dpbmcgP1xuICAgIHRoaXMuc3RvcERyYWcoYWJvcnRlZCkgOlxuICAgICAgdGhpcy5zdG9wV2FpdGluZ1RvRHJhZygpO1xuXG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gIHdpbmRvdy5vZmYoQkxVUl9FVkVOVF9UWVBFLCBtb3VzZVVwSGFuZGxlciwgdGhpcyk7ICAvLy9cblxuICB3aW5kb3cub2ZmTW91c2VVcChtb3VzZVVwSGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG1vdXNlRG93bkhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBidXR0b24gfSA9IGV2ZW50O1xuXG4gIGlmIChidXR0b24gPT09IExFRlRfTU9VU0VfQlVUVE9OKSB7XG4gICAgY29uc3QgZHJhZ2dpbmcgPSB0aGlzLmlzRHJhZ2dpbmcoKTtcblxuICAgIGlmICghZHJhZ2dpbmcpIHtcbiAgICAgIGNvbnN0IG1vdXNlVG9wID0gbW91c2VUb3BGcm9tRXZlbnQoZXZlbnQpLFxuICAgICAgICAgICAgbW91c2VMZWZ0ID0gbW91c2VMZWZ0RnJvbUV2ZW50KGV2ZW50KTtcblxuICAgICAgdGhpcy5zdGFydFdhaXRpbmdUb0RyYWcobW91c2VUb3AsIG1vdXNlTGVmdCk7XG4gICAgfVxuICB9XG5cbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgd2luZG93Lm9uKEJMVVJfRVZFTlRfVFlQRSwgbW91c2VVcEhhbmRsZXIsIHRoaXMpOyAvLy9cblxuICB3aW5kb3cub25Nb3VzZVVwKG1vdXNlVXBIYW5kbGVyLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gbW91c2VNb3ZlSGFuZGxlcihldmVudCwgZWxlbWVudCkge1xuICBjb25zdCBkcmFnZ2luZyA9IHRoaXMuaXNEcmFnZ2luZygpO1xuXG4gIGlmIChkcmFnZ2luZykge1xuICAgIGNvbnN0IG1vdXNlVG9wID0gbW91c2VUb3BGcm9tRXZlbnQoZXZlbnQpLFxuICAgICAgICAgIG1vdXNlTGVmdCA9IG1vdXNlTGVmdEZyb21FdmVudChldmVudCk7XG5cbiAgICB0aGlzLmRyYWcobW91c2VUb3AsIG1vdXNlTGVmdCk7XG4gIH1cblxuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbn1cbiJdLCJuYW1lcyI6WyJmb3JFYWNoIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwiRVNDQVBFX0tFWUNPREUiLCJrZXlDb2RlcyIsIkxFRlRfTU9VU0VfQlVUVE9OIiwiYnV0dG9ucyIsIkJMVVJfRVZFTlRfVFlQRSIsImV2ZW50VHlwZXMiLCJEUkFHX0VWRU5UX1RZUEUiLCJTVE9QX0RSQUdfRVZFTlRfVFlQRSIsIlNUQVJUX0RSQUdfRVZFTlRfVFlQRSIsImRyYWdFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwiZ2xvYmFsVGhpcyIsIm9uRHJhZyIsImRyYWdIYW5kbGVyIiwiZWxlbWVudCIsImV2ZW50VHlwZSIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmRHJhZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblN0b3BEcmFnIiwic3RvcERyYWdIYW5kbGVyIiwib2ZmU3RvcERyYWciLCJvblN0YXJ0RHJhZyIsInN0YXJ0RHJhZ0hhbmRsZXIiLCJvZmZTdGFydERyYWciLCJlbmFibGVEcmFnIiwicHJvcGVydGllcyIsInRpbWVvdXQiLCJ0b3BPZmZzZXQiLCJsZWZ0T2Zmc2V0Iiwic3RhcnRNb3VzZVRvcCIsInN0YXJ0TW91c2VMZWZ0Iiwib25Nb3VzZURvd24iLCJtb3VzZURvd25IYW5kbGVyIiwic2V0U3RhdGUiLCJkaXNhYmxlRHJhZyIsIm9mZk1vdXNlRG93biIsImlzRHJhZ2dpbmciLCJkcmFnZ2luZyIsImhhc0NsYXNzIiwic3RhcnRXYWl0aW5nVG9EcmFnIiwibW91c2VUb3AiLCJtb3VzZUxlZnQiLCJnZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsInJlc2V0VGltZW91dCIsInN0YXJ0RHJhZyIsIlNUQVJUX0RSQUdHSU5HX0RFTEFZIiwidXBkYXRlVGltZW91dCIsInN0b3BXYWl0aW5nVG9EcmFnIiwiY2xlYXJUaW1lb3V0IiwiYm91bmRzIiwiZ2V0Qm91bmRzIiwiYm91bmRzVG9wIiwiZ2V0VG9wIiwiYm91bmRzTGVmdCIsImdldExlZnQiLCJib3VuZHNSaWdodCIsImdldFJpZ2h0IiwiYm91bmRzQm90dG9tIiwiZ2V0Qm90dG9tIiwiYm91bmRzV2lkdGgiLCJib3VuZHNIZWlnaHQiLCJNYXRoIiwiZmxvb3IiLCJ3aW5kb3ciLCJvbktleURvd24iLCJrZXlEb3duSGFuZGxlciIsIm9uTW91c2VNb3ZlIiwibW91c2VNb3ZlSGFuZGxlciIsImFkZENsYXNzIiwic2V0VG9wT2Zmc2V0Iiwic2V0TGVmdE9mZnNldCIsInNldFN0YXJ0TW91c2VUb3AiLCJzZXRTdGFydE1vdXNlTGVmdCIsImNhbGxIYW5kbGVycyIsImRyYWciLCJzdG9wRHJhZyIsImFib3J0ZWQiLCJkcm9wRWxlbWVudCIsIm9mZktleURvd24iLCJvZmZNb3VzZU1vdmUiLCJkb25lIiwiY2FsbEhhbmRsZXJzQXN5bmMiLCJyZW1vdmVDbGFzcyIsImRyb3AiLCJzY3JvbGxUb3AiLCJnZXRTY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZ2V0U2Nyb2xsTGVmdCIsImdldFRvcE9mZnNldCIsImdldExlZnRPZmZzZXQiLCJnZXRTdGFydE1vdXNlVG9wIiwiZ2V0U3RhcnRNb3VzZUxlZnQiLCJyZWxhdGl2ZU1vdXNlVG9wIiwicmVsYXRpdmVNb3VzZUxlZnQiLCJ0b3AiLCJsZWZ0IiwiY3NzIiwic3RhdGUiLCJnZXRTdGF0ZSIsInVwZGF0ZVN0YXRlIiwicmVtYWluaW5nQXJndW1lbnRzIiwiZXZlbnRMaXN0ZW5lcnMiLCJmaW5kRXZlbnRMaXN0ZW5lcnMiLCJldmVudExpc3RlbmVyIiwiaGFuZGxlckVsZW1lbnQiLCJjYWxsIiwicG9wIiwibmV4dCIsImV2ZW50Iiwia2V5Q29kZSIsImVzY2FwZUtleSIsInN0b3BQcm9wYWdhdGlvbiIsIm1vdXNlVXBIYW5kbGVyIiwib2ZmIiwib2ZmTW91c2VVcCIsImJ1dHRvbiIsIm1vdXNlVG9wRnJvbUV2ZW50IiwibW91c2VMZWZ0RnJvbUV2ZW50Iiwib24iLCJvbk1vdXNlVXAiXSwibWFwcGluZ3MiOiJBQUFBLENBQVk7Ozs7O0FBRWdDLEdBQU0sQ0FBTixLQUFNO0FBQ0YsR0FBVyxDQUFYLFVBQVc7QUFFdEIsR0FBYyxDQUFkLFVBQWM7QUFDRyxHQUFvQixDQUFwQixNQUFvQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFMUUsR0FBSyxDQUFHQSxPQUFPLEdBQUtDLFVBQXFCLHVCQUFqQ0QsT0FBTyxFQUNQRSxjQUFjLEdBQUtDLFVBQVEsVUFBM0JELGNBQWMsRUFDZEUsaUJBQWlCLEdB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