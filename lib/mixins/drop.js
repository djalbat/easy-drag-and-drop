"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _easy = require("easy");
var _necessary = require("necessary");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var forEach = _necessary.asynchronousUtilities.forEach, DROP_EVENT_TYPE = _easy.eventTypes.DROP_EVENT_TYPE, DRAG_OUT_EVENT_TYPE = _easy.eventTypes.DRAG_OUT_EVENT_TYPE, DRAG_OVER_EVENT_TYPE = _easy.eventTypes.DRAG_OVER_EVENT_TYPE;
var dropElement = null;
Object.assign(globalThis, {
    dropElement: dropElement
});
function drop(dragElement, aborted, done) {
    var eventType = DROP_EVENT_TYPE;
    this.callHandlersAsync(eventType, dragElement, aborted, done);
}
function dragOut(dragElement) {
    var eventType = DRAG_OUT_EVENT_TYPE;
    this.callHandlers(eventType, dragElement);
}
function dragOver() {
    var eventType = DRAG_OVER_EVENT_TYPE;
    this.callHandlers(eventType, dragElement);
}
function onDrop(dropHandler, element) {
    var eventType = DROP_EVENT_TYPE, handler = dropHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDrop(dropHandler, element) {
    var eventType = DROP_EVENT_TYPE, handler = dropHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onDragOut(dragOutHandler, element) {
    var eventType = DRAG_OUT_EVENT_TYPE, handler = dragOutHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDragOut(dragOutHandler, element) {
    var eventType = DRAG_OUT_EVENT_TYPE, handler = dragOutHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onDragOver(dragOverHandler, element) {
    var eventType = DRAG_OVER_EVENT_TYPE, handler = dragOverHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDragOver(dragOverHandler, element) {
    var eventType = DRAG_OVER_EVENT_TYPE, handler = dragOverHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function enableDrop() {
    var _properties = this.properties, onDrop1 = _properties.onDrop, onDragOut1 = _properties.onDragOut, onDragOver1 = _properties.onDragOver, dropHandler = onDrop1, dragOutHandler = onDragOut1, dragOverHandler = onDragOver1; ///
    dropHandler && this.onDrop(dropHandler);
    dragOutHandler && this.onDragOut(dragOutHandler);
    dragOverHandler && this.onDragOver(dragOverHandler);
    this.onMouseOut(mouseOutHandler, this);
    this.onMouseOver(mouseOverHandler, this);
}
function disableDrop() {
    var _properties = this.properties, onDrop2 = _properties.onDrop, onDragOut2 = _properties.onDragOut, onDragOver2 = _properties.onDragOver, dropHandler = onDrop2, dragOutHandler = onDragOut2, dragOverHandler = onDragOver2; ///
    dropHandler && this.offDrop(dropHandler);
    dragOutHandler && this.offDragOut(dragOutHandler);
    dragOverHandler && this.offDragOver(dragOverHandler);
    this.offMouseOut(mouseOutHandler, this);
    this.offMouseOver(mouseOverHandler, this);
}
function callHandlers(eventType) {
    for(var _len = arguments.length, remainingArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        remainingArguments[_key - 1] = arguments[_key];
    }
    var _this = this;
    var eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var _handler;
        var handler = eventListener.handler, handlerElement = eventListener.element, element = _this; ///
        (_handler = handler).call.apply(_handler, [
            handlerElement
        ].concat(_toConsumableArray(remainingArguments), [
            element
        ]));
    });
}
function callHandlersAsync(eventType) {
    for(var _len = arguments.length, remainingArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        remainingArguments[_key - 1] = arguments[_key];
    }
    var _this = this;
    var done1 = remainingArguments.pop(), eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var _handler;
        var handler = eventListener.handler, handlerElement = eventListener.element, element = _this, done = next; ///
        (_handler = handler).call.apply(_handler, [
            handlerElement
        ].concat(_toConsumableArray(remainingArguments), [
            element,
            done
        ]));
    }, done1);
}
var _default = {
    drop: drop,
    dragOut: dragOut,
    dragOver: dragOver,
    onDrop: onDrop,
    offDrop: offDrop,
    onDragOut: onDragOut,
    offDragOut: offDragOut,
    onDragOver: onDragOver,
    offDragOver: offDragOver,
    enableDrop: enableDrop,
    disableDrop: disableDrop,
    callHandlers: callHandlers,
    callHandlersAsync: callHandlersAsync
};
exports.default = _default;
function mouseOutHandler(event, element) {
    var dragElement = globalThis.dragElement;
    if (dragElement !== null) {
        var dropElement1 = null; ///
        Object.assign(globalThis, {
            dropElement: dropElement1
        });
        this.dragOut(dragElement);
    }
    event.stopPropagation();
}
function mouseOverHandler(event, element) {
    var dragElement = globalThis.dragElement;
    if (dragElement !== null) {
        var dropElement2 = this; ///
        Object.assign(globalThis, {
            dropElement: dropElement2
        });
        this.dragOver(dragElement);
    }
    event.stopPropagation();
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZHJvcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZXZlbnRUeXBlcyB9IGZyb20gXCJlYXN5XCI7XG5pbXBvcnQgeyBhc3luY2hyb25vdXNVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCIgO1xuXG5jb25zdCB7IGZvckVhY2ggfSA9IGFzeW5jaHJvbm91c1V0aWxpdGllcyxcbiAgICAgIHsgRFJPUF9FVkVOVF9UWVBFLCBEUkFHX09VVF9FVkVOVF9UWVBFLCBEUkFHX09WRVJfRVZFTlRfVFlQRSB9ID0gZXZlbnRUeXBlcztcblxuY29uc3QgZHJvcEVsZW1lbnQgPSBudWxsO1xuXG5PYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHtcbiAgZHJvcEVsZW1lbnRcbn0pO1xuXG5mdW5jdGlvbiBkcm9wKGRyYWdFbGVtZW50LCBhYm9ydGVkLCBkb25lKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IERST1BfRVZFTlRfVFlQRTtcblxuICB0aGlzLmNhbGxIYW5kbGVyc0FzeW5jKGV2ZW50VHlwZSwgZHJhZ0VsZW1lbnQsIGFib3J0ZWQsIGRvbmUpO1xufVxuXG5mdW5jdGlvbiBkcmFnT3V0KGRyYWdFbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IERSQUdfT1VUX0VWRU5UX1RZUEU7XG5cbiAgdGhpcy5jYWxsSGFuZGxlcnMoZXZlbnRUeXBlLCBkcmFnRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGRyYWdPdmVyKCkge1xuICBjb25zdCBldmVudFR5cGUgPSBEUkFHX09WRVJfRVZFTlRfVFlQRTtcblxuICB0aGlzLmNhbGxIYW5kbGVycyhldmVudFR5cGUsIGRyYWdFbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25Ecm9wKGRyb3BIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IERST1BfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGRyb3BIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkRyb3AoZHJvcEhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gRFJPUF9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gZHJvcEhhbmRsZXI7ICAvLy9cblxuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25EcmFnT3V0KGRyYWdPdXRIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IERSQUdfT1VUX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBkcmFnT3V0SGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZEcmFnT3V0KGRyYWdPdXRIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IERSQUdfT1VUX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBkcmFnT3V0SGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvbkRyYWdPdmVyKGRyYWdPdmVySGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBEUkFHX09WRVJfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGRyYWdPdmVySGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZEcmFnT3ZlcihkcmFnT3ZlckhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gRFJBR19PVkVSX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBkcmFnT3ZlckhhbmRsZXI7ICAvLy9cblxuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlRHJvcCgpIHtcbiAgY29uc3QgeyBvbkRyb3AsIG9uRHJhZ091dCwgb25EcmFnT3ZlciB9ID0gdGhpcy5wcm9wZXJ0aWVzLFxuICAgICAgICBkcm9wSGFuZGxlciA9IG9uRHJvcCwgLy8vXG4gICAgICAgIGRyYWdPdXRIYW5kbGVyID0gb25EcmFnT3V0LCAvLy9cbiAgICAgICAgZHJhZ092ZXJIYW5kbGVyID0gb25EcmFnT3ZlcjsgLy8vXG5cbiAgZHJvcEhhbmRsZXIgJiYgdGhpcy5vbkRyb3AoZHJvcEhhbmRsZXIpO1xuICBkcmFnT3V0SGFuZGxlciAmJiB0aGlzLm9uRHJhZ091dChkcmFnT3V0SGFuZGxlcik7XG4gIGRyYWdPdmVySGFuZGxlciAmJiB0aGlzLm9uRHJhZ092ZXIoZHJhZ092ZXJIYW5kbGVyKTtcblxuICB0aGlzLm9uTW91c2VPdXQobW91c2VPdXRIYW5kbGVyLCB0aGlzKTtcbiAgdGhpcy5vbk1vdXNlT3Zlcihtb3VzZU92ZXJIYW5kbGVyLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZURyb3AoKSB7XG4gIGNvbnN0IHsgb25Ecm9wLCBvbkRyYWdPdXQsIG9uRHJhZ092ZXIgfSA9IHRoaXMucHJvcGVydGllcyxcbiAgICAgICAgZHJvcEhhbmRsZXIgPSBvbkRyb3AsIC8vL1xuICAgICAgICBkcmFnT3V0SGFuZGxlciA9IG9uRHJhZ091dCwgLy8vXG4gICAgICAgIGRyYWdPdmVySGFuZGxlciA9IG9uRHJhZ092ZXI7IC8vL1xuXG4gIGRyb3BIYW5kbGVyICYmIHRoaXMub2ZmRHJvcChkcm9wSGFuZGxlcik7XG4gIGRyYWdPdXRIYW5kbGVyICYmIHRoaXMub2ZmRHJhZ091dChkcmFnT3V0SGFuZGxlcik7XG4gIGRyYWdPdmVySGFuZGxlciAmJiB0aGlzLm9mZkRyYWdPdmVyKGRyYWdPdmVySGFuZGxlcik7XG5cbiAgdGhpcy5vZmZNb3VzZU91dChtb3VzZU91dEhhbmRsZXIsIHRoaXMpO1xuICB0aGlzLm9mZk1vdXNlT3Zlcihtb3VzZU92ZXJIYW5kbGVyLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gY2FsbEhhbmRsZXJzKGV2ZW50VHlwZSwgLi4ucmVtYWluaW5nQXJndW1lbnRzKSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5maW5kRXZlbnRMaXN0ZW5lcnMoZXZlbnRUeXBlKTtcblxuICBldmVudExpc3RlbmVycy5mb3JFYWNoKChldmVudExpc3RlbmVyKSA9PiB7XG4gICAgY29uc3QgeyBoYW5kbGVyLCBlbGVtZW50OiBoYW5kbGVyRWxlbWVudCB9ID0gZXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICBlbGVtZW50ID0gdGhpczsgLy8vXG5cbiAgICBoYW5kbGVyLmNhbGwoaGFuZGxlckVsZW1lbnQsIC4uLnJlbWFpbmluZ0FyZ3VtZW50cywgZWxlbWVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjYWxsSGFuZGxlcnNBc3luYyhldmVudFR5cGUsIC4uLnJlbWFpbmluZ0FyZ3VtZW50cykge1xuICBjb25zdCBkb25lID0gcmVtYWluaW5nQXJndW1lbnRzLnBvcCgpLCAgLy8vXG4gICAgICAgIGV2ZW50TGlzdGVuZXJzID0gdGhpcy5maW5kRXZlbnRMaXN0ZW5lcnMoZXZlbnRUeXBlKTtcblxuICBmb3JFYWNoKGV2ZW50TGlzdGVuZXJzLCAoZXZlbnRMaXN0ZW5lciwgbmV4dCkgPT4ge1xuICAgIGNvbnN0IHsgaGFuZGxlciwgZWxlbWVudDogaGFuZGxlckVsZW1lbnQgfSA9IGV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgZWxlbWVudCA9IHRoaXMsIC8vL1xuICAgICAgICAgIGRvbmUgPSBuZXh0OyAgLy8vXG5cbiAgICBoYW5kbGVyLmNhbGwoaGFuZGxlckVsZW1lbnQsIC4uLnJlbWFpbmluZ0FyZ3VtZW50cywgZWxlbWVudCwgZG9uZSk7XG4gIH0sIGRvbmUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyb3AsXG4gIGRyYWdPdXQsXG4gIGRyYWdPdmVyLFxuICBvbkRyb3AsXG4gIG9mZkRyb3AsXG4gIG9uRHJhZ091dCxcbiAgb2ZmRHJhZ091dCxcbiAgb25EcmFnT3ZlcixcbiAgb2ZmRHJhZ092ZXIsXG4gIGVuYWJsZURyb3AsXG4gIGRpc2FibGVEcm9wLFxuICBjYWxsSGFuZGxlcnMsXG4gIGNhbGxIYW5kbGVyc0FzeW5jXG59XG5cbmZ1bmN0aW9uIG1vdXNlT3V0SGFuZGxlcihldmVudCwgZWxlbWVudCkge1xuICBjb25zdCB7IGRyYWdFbGVtZW50IH0gPSBnbG9iYWxUaGlzO1xuXG4gIGlmIChkcmFnRWxlbWVudCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRyb3BFbGVtZW50ID0gbnVsbDsgLy8vXG5cbiAgICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHtcbiAgICAgIGRyb3BFbGVtZW50XG4gICAgfSk7XG5cbiAgICB0aGlzLmRyYWdPdXQoZHJhZ0VsZW1lbnQpO1xuICB9XG5cbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG5cbmZ1bmN0aW9uIG1vdXNlT3ZlckhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBkcmFnRWxlbWVudCB9ID0gZ2xvYmFsVGhpcztcblxuICBpZiAoZHJhZ0VsZW1lbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCBkcm9wRWxlbWVudCA9IHRoaXM7IC8vL1xuXG4gICAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7XG4gICAgICBkcm9wRWxlbWVudFxuICAgIH0pO1xuXG4gICAgdGhpcy5kcmFnT3ZlcihkcmFnRWxlbWVudCk7XG4gIH1cblxuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbn1cbiJdLCJuYW1lcyI6WyJmb3JFYWNoIiwiYXN5bmNocm9ub3VzVXRpbGl0aWVzIiwiRFJPUF9FVkVOVF9UWVBFIiwiZXZlbnRUeXBlcyIsIkRSQUdfT1VUX0VWRU5UX1RZUEUiLCJEUkFHX09WRVJfRVZFTlRfVFlQRSIsImRyb3BFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwiZ2xvYmFsVGhpcyIsImRyb3AiLCJkcmFnRWxlbWVudCIsImFib3J0ZWQiLCJkb25lIiwiZXZlbnRUeXBlIiwiY2FsbEhhbmRsZXJzQXN5bmMiLCJkcmFnT3V0IiwiY2FsbEhhbmRsZXJzIiwiZHJhZ092ZXIiLCJvbkRyb3AiLCJkcm9wSGFuZGxlciIsImVsZW1lbnQiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9mZkRyb3AiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25EcmFnT3V0IiwiZHJhZ091dEhhbmRsZXIiLCJvZmZEcmFnT3V0Iiwib25EcmFnT3ZlciIsImRyYWdPdmVySGFuZGxlciIsIm9mZkRyYWdPdmVyIiwiZW5hYmxlRHJvcCIsInByb3BlcnRpZXMiLCJvbk1vdXNlT3V0IiwibW91c2VPdXRIYW5kbGVyIiwib25Nb3VzZU92ZXIiLCJtb3VzZU92ZXJIYW5kbGVyIiwiZGlzYWJsZURyb3AiLCJvZmZNb3VzZU91dCIsIm9mZk1vdXNlT3ZlciIsInJlbWFpbmluZ0FyZ3VtZW50cyIsImV2ZW50TGlzdGVuZXJzIiwiZmluZEV2ZW50TGlzdGVuZXJzIiwiZXZlbnRMaXN0ZW5lciIsImhhbmRsZXJFbGVtZW50IiwiY2FsbCIsInBvcCIsIm5leHQiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7Ozs7QUFFZSxHQUFNLENBQU4sS0FBTTtBQUNLLEdBQVcsQ0FBWCxVQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVqRCxHQUFLLENBQUdBLE9BQU8sR0FBS0MsVUFBcUIsdUJBQWpDRCxPQUFPLEVBQ1BFLGVBQWUsR0FBZ0RDLEtBQVUsWUFBekVELGVBQWUsRUFBRUUsbUJBQW1CLEdBQTJCRCxLQUFVLFlBQXhEQyxtQkFBbUIsRUFBRUMsb0JBQW9CLEdBQUtGLEtBQVUsWUFB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