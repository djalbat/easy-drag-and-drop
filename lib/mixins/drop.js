"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _reference = require("../utilities/reference");
var _customEventTypes = require("../customEventTypes");
var dropElement = null;
Object.assign(globalThis, {
    dropElement: dropElement
});
function drop(event, element, dragElement, aborted, done) {
    var customEventType = _customEventTypes.DROP_CUSTOM_EVENT_TYPE;
    this.callCustomHandlersAsync(customEventType, event, element, dragElement, aborted, done);
}
function dragOut(event, element, dragElement) {
    var customEventType = _customEventTypes.DRAG_OUT_CUSTOM_EVENT_TYPE;
    this.callCustomHandlers(customEventType, event, element, dragElement);
}
function dragOver(event, element, dragElement) {
    var customEventType = _customEventTypes.DRAG_OVER_CUSTOM_EVENT_TYPE;
    this.callCustomHandlers(customEventType, event, element, dragElement);
}
function enableDrop() {
    this.onMouseOut(mouseOutHandler, this);
    this.onMouseOver(mouseOverHandler, this);
}
function disableDrop() {
    this.offMouseOut(mouseOutHandler, this);
    this.offMouseOver(mouseOverHandler, this);
}
function onCustomDrop(dropCustomHandler, element) {
    var customEventType = _customEventTypes.DROP_CUSTOM_EVENT_TYPE, customHandler = dropCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomDrop(dropCustomHandler, element) {
    var customEventType = _customEventTypes.DROP_CUSTOM_EVENT_TYPE, customHandler = dropCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomDragOut(dragOutCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_OUT_CUSTOM_EVENT_TYPE, customHandler = dragOutCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomDragOut(dragOutCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_OUT_CUSTOM_EVENT_TYPE, customHandler = dragOutCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
function onCustomDragOver(dragOverCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_OVER_CUSTOM_EVENT_TYPE, customHandler = dragOverCustomHandler; ///
    this.onCustomEvent(customEventType, customHandler, element);
}
function offCustomDragOver(dragOverCustomHandler, element) {
    var customEventType = _customEventTypes.DRAG_OVER_CUSTOM_EVENT_TYPE, customHandler = dragOverCustomHandler; ///
    this.offCustomEvent(customEventType, customHandler, element);
}
var _default = {
    drop: drop,
    dragOut: dragOut,
    dragOver: dragOver,
    enableDrop: enableDrop,
    disableDrop: disableDrop,
    onCustomDrop: onCustomDrop,
    offCustomDrop: offCustomDrop,
    onCustomDragOut: onCustomDragOut,
    offCustomDragOut: offCustomDragOut,
    onCustomDragOver: onCustomDragOver,
    offCustomDragOver: offCustomDragOver
};
function mouseOutHandler(event, element) {
    var dragElement = globalThis.dragElement;
    if (dragElement !== null) {
        var dropElement = null; ///
        Object.assign(globalThis, {
            dropElement: dropElement
        });
        this.dragOut(event, element, dragElement);
    }
    event.stopPropagation();
}
function mouseOverHandler(event, element) {
    var dragElement = globalThis.dragElement;
    if (dragElement !== null) {
        var dropElement = this, dragElementIgnoresDropElement = (0, _reference.checkDragElementIgnoresDropElement)(dragElement, dropElement);
        if (dragElementIgnoresDropElement) {
            return;
        }
        Object.assign(globalThis, {
            dropElement: dropElement
        });
        this.dragOver(event, element, dragElement);
    }
    event.stopPropagation();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZHJvcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgY2hlY2tEcmFnRWxlbWVudElnbm9yZXNEcm9wRWxlbWVudCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcmVmZXJlbmNlXCI7XG5pbXBvcnQgeyBEUk9QX0NVU1RPTV9FVkVOVF9UWVBFLCBEUkFHX09VVF9DVVNUT01fRVZFTlRfVFlQRSwgRFJBR19PVkVSX0NVU1RPTV9FVkVOVF9UWVBFIH0gZnJvbSBcIi4uL2N1c3RvbUV2ZW50VHlwZXNcIjtcblxuY29uc3QgZHJvcEVsZW1lbnQgPSBudWxsO1xuXG5PYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHtcbiAgZHJvcEVsZW1lbnRcbn0pO1xuXG5mdW5jdGlvbiBkcm9wKGV2ZW50LCBlbGVtZW50LCBkcmFnRWxlbWVudCwgYWJvcnRlZCwgZG9uZSkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBEUk9QX0NVU1RPTV9FVkVOVF9UWVBFO1xuXG4gIHRoaXMuY2FsbEN1c3RvbUhhbmRsZXJzQXN5bmMoY3VzdG9tRXZlbnRUeXBlLCBldmVudCwgZWxlbWVudCwgZHJhZ0VsZW1lbnQsIGFib3J0ZWQsIGRvbmUpO1xufVxuXG5mdW5jdGlvbiBkcmFnT3V0KGV2ZW50LCBlbGVtZW50LCBkcmFnRWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBEUkFHX09VVF9DVVNUT01fRVZFTlRfVFlQRTtcblxuICB0aGlzLmNhbGxDdXN0b21IYW5kbGVycyhjdXN0b21FdmVudFR5cGUsIGV2ZW50LCBlbGVtZW50LCBkcmFnRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGRyYWdPdmVyKGV2ZW50LCBlbGVtZW50LCBkcmFnRWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBEUkFHX09WRVJfQ1VTVE9NX0VWRU5UX1RZUEU7XG5cbiAgdGhpcy5jYWxsQ3VzdG9tSGFuZGxlcnMoY3VzdG9tRXZlbnRUeXBlLCBldmVudCwgZWxlbWVudCwgZHJhZ0VsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBlbmFibGVEcm9wKCkge1xuICB0aGlzLm9uTW91c2VPdXQobW91c2VPdXRIYW5kbGVyLCB0aGlzKTtcbiAgdGhpcy5vbk1vdXNlT3Zlcihtb3VzZU92ZXJIYW5kbGVyLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZURyb3AoKSB7XG4gIHRoaXMub2ZmTW91c2VPdXQobW91c2VPdXRIYW5kbGVyLCB0aGlzKTtcbiAgdGhpcy5vZmZNb3VzZU92ZXIobW91c2VPdmVySGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uQ3VzdG9tRHJvcChkcm9wQ3VzdG9tSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBEUk9QX0NVU1RPTV9FVkVOVF9UWVBFLFxuICAgICAgICBjdXN0b21IYW5kbGVyID0gZHJvcEN1c3RvbUhhbmRsZXI7ICAvLy9cblxuICB0aGlzLm9uQ3VzdG9tRXZlbnQoY3VzdG9tRXZlbnRUeXBlLCBjdXN0b21IYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmQ3VzdG9tRHJvcChkcm9wQ3VzdG9tSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBEUk9QX0NVU1RPTV9FVkVOVF9UWVBFLFxuICAgICAgICBjdXN0b21IYW5kbGVyID0gZHJvcEN1c3RvbUhhbmRsZXI7ICAvLy9cblxuICB0aGlzLm9mZkN1c3RvbUV2ZW50KGN1c3RvbUV2ZW50VHlwZSwgY3VzdG9tSGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9uQ3VzdG9tRHJhZ091dChkcmFnT3V0Q3VzdG9tSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBEUkFHX09VVF9DVVNUT01fRVZFTlRfVFlQRSxcbiAgICAgICAgY3VzdG9tSGFuZGxlciA9IGRyYWdPdXRDdXN0b21IYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5vbkN1c3RvbUV2ZW50KGN1c3RvbUV2ZW50VHlwZSwgY3VzdG9tSGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkN1c3RvbURyYWdPdXQoZHJhZ091dEN1c3RvbUhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgY3VzdG9tRXZlbnRUeXBlID0gRFJBR19PVVRfQ1VTVE9NX0VWRU5UX1RZUEUsXG4gICAgICAgIGN1c3RvbUhhbmRsZXIgPSBkcmFnT3V0Q3VzdG9tSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMub2ZmQ3VzdG9tRXZlbnQoY3VzdG9tRXZlbnRUeXBlLCBjdXN0b21IYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25DdXN0b21EcmFnT3ZlcihkcmFnT3ZlckN1c3RvbUhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgY3VzdG9tRXZlbnRUeXBlID0gRFJBR19PVkVSX0NVU1RPTV9FVkVOVF9UWVBFLFxuICAgICAgICBjdXN0b21IYW5kbGVyID0gZHJhZ092ZXJDdXN0b21IYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5vbkN1c3RvbUV2ZW50KGN1c3RvbUV2ZW50VHlwZSwgY3VzdG9tSGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkN1c3RvbURyYWdPdmVyKGRyYWdPdmVyQ3VzdG9tSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBjdXN0b21FdmVudFR5cGUgPSBEUkFHX09WRVJfQ1VTVE9NX0VWRU5UX1RZUEUsXG4gICAgICAgIGN1c3RvbUhhbmRsZXIgPSBkcmFnT3ZlckN1c3RvbUhhbmRsZXI7ICAvLy9cblxuICB0aGlzLm9mZkN1c3RvbUV2ZW50KGN1c3RvbUV2ZW50VHlwZSwgY3VzdG9tSGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJvcCxcbiAgZHJhZ091dCxcbiAgZHJhZ092ZXIsXG4gIGVuYWJsZURyb3AsXG4gIGRpc2FibGVEcm9wLFxuICBvbkN1c3RvbURyb3AsXG4gIG9mZkN1c3RvbURyb3AsXG4gIG9uQ3VzdG9tRHJhZ091dCxcbiAgb2ZmQ3VzdG9tRHJhZ091dCxcbiAgb25DdXN0b21EcmFnT3ZlcixcbiAgb2ZmQ3VzdG9tRHJhZ092ZXJcbn1cblxuZnVuY3Rpb24gbW91c2VPdXRIYW5kbGVyKGV2ZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IHsgZHJhZ0VsZW1lbnQgfSA9IGdsb2JhbFRoaXM7XG5cbiAgaWYgKGRyYWdFbGVtZW50ICE9PSBudWxsKSB7XG4gICAgY29uc3QgZHJvcEVsZW1lbnQgPSBudWxsOyAvLy9cblxuICAgIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywge1xuICAgICAgZHJvcEVsZW1lbnRcbiAgICB9KTtcblxuICAgIHRoaXMuZHJhZ091dChldmVudCwgZWxlbWVudCwgZHJhZ0VsZW1lbnQpO1xuICB9XG5cbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG5cbmZ1bmN0aW9uIG1vdXNlT3ZlckhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBkcmFnRWxlbWVudCB9ID0gZ2xvYmFsVGhpcztcblxuICBpZiAoZHJhZ0VsZW1lbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCBkcm9wRWxlbWVudCA9IHRoaXMsIC8vL1xuICAgICAgICAgIGRyYWdFbGVtZW50SWdub3Jlc0Ryb3BFbGVtZW50ID0gY2hlY2tEcmFnRWxlbWVudElnbm9yZXNEcm9wRWxlbWVudChkcmFnRWxlbWVudCwgZHJvcEVsZW1lbnQpO1xuXG4gICAgaWYgKGRyYWdFbGVtZW50SWdub3Jlc0Ryb3BFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7XG4gICAgICBkcm9wRWxlbWVudFxuICAgIH0pO1xuXG4gICAgdGhpcy5kcmFnT3ZlcihldmVudCwgZWxlbWVudCwgZHJhZ0VsZW1lbnQpO1xuICB9XG5cbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG4iXSwibmFtZXMiOlsiZHJvcEVsZW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJnbG9iYWxUaGlzIiwiZHJvcCIsImV2ZW50IiwiZWxlbWVudCIsImRyYWdFbGVtZW50IiwiYWJvcnRlZCIsImRvbmUiLCJjdXN0b21FdmVudFR5cGUiLCJEUk9QX0NVU1RPTV9FVkVOVF9UWVBFIiwiY2FsbEN1c3RvbUhhbmRsZXJzQXN5bmMiLCJkcmFnT3V0IiwiRFJBR19PVVRfQ1VTVE9NX0VWRU5UX1RZUEUiLCJjYWxsQ3VzdG9tSGFuZGxlcnMiLCJkcmFnT3ZlciIsIkRSQUdfT1ZFUl9DVVNUT01fRVZFTlRfVFlQRSIsImVuYWJsZURyb3AiLCJvbk1vdXNlT3V0IiwibW91c2VPdXRIYW5kbGVyIiwib25Nb3VzZU92ZXIiLCJtb3VzZU92ZXJIYW5kbGVyIiwiZGlzYWJsZURyb3AiLCJvZmZNb3VzZU91dCIsIm9mZk1vdXNlT3ZlciIsIm9uQ3VzdG9tRHJvcCIsImRyb3BDdXN0b21IYW5kbGVyIiwiY3VzdG9tSGFuZGxlciIsIm9uQ3VzdG9tRXZlbnQiLCJvZmZDdXN0b21Ecm9wIiwib2ZmQ3VzdG9tRXZlbnQiLCJvbkN1c3RvbURyYWdPdXQiLCJkcmFnT3V0Q3VzdG9tSGFuZGxlciIsIm9mZkN1c3RvbURyYWdPdXQiLCJvbkN1c3RvbURyYWdPdmVyIiwiZHJhZ092ZXJDdXN0b21IYW5kbGVyIiwib2ZmQ3VzdG9tRHJhZ092ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJkcmFnRWxlbWVudElnbm9yZXNEcm9wRWxlbWVudCIsImNoZWNrRHJhZ0VsZW1lbnRJZ25vcmVzRHJvcEVsZW1lbnQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBaUZBOzs7ZUFBQTs7O3lCQS9FbUQ7Z0NBQzZDO0FBRWhHLElBQU1BLGNBQWM7QUFFcEJDLE9B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